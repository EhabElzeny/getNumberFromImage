<?php

class getNumberFromImageController 
{
    public $conf = [];
    private $char_global_mas = [] ;
    public function __Construct(){
        $this->char_global_mas = $this->char_inc();
        //If you create a new font  replace char_inc with your own
        $this->conf['font_file']					= $this->char_inc();

        //The defoult image that gets parsed when no parameter filename is given
        $this->conf['default_image']				= 'tmp1.png';

        //The default output format. You can chose from xml,html,plain,template.
        $this->conf['default_output_format']		= 'html';

        //You shold probably not need to change thees
        $this->conf['word_lines_min_dispersion']	= 0;
        $this->conf['letters_min_dispersion']		= 0;
    }

    public function searchNumber($fileName){ // this will use all  methods
        $out= 'html';
        $filename = isset($fileName)? $fileName:$this->conf['default_image'];

        /*
        if ($filename == 'upload') {
            $filename = $_FILES['userfile']['tmp_name'];
        }
        */

        $time_start = microtime();
        if($out!='template') {

            //*******************************************************
            //This is the main function. Format of the output array is $retmas[$line_number][$letter_number][$type]
            //where $type is 0 for digit and 1 for relative closeness
            $retmas = $this->parse_image($filename,$this->conf['font_file']);
            //*******************************************************

            $time = microtime() - $time_start;	//execution time
        }

        if($out=='xml')
            return $this->print_output_xml($retmas,$filename,$time);
        elseif ($out=='html')
            // edit here because in need return not html
            return $this->print_output_html($retmas,$filename,$time);
        elseif ($out=='plain')
            return $this->print_output_plain($retmas);
        elseif ($out=='template')
            return $this->write_template($filename);	//this is different from xml,html or plain
    }

    private function char_inc(){
        $char_global_mas[] = Array (
            Array("char"=>Array(
                Array(0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,1,2,3,4,5,5,5,5,5,5,4,3,2,1,1,0,0,0,0,0,0),
                Array(0,0,0,0,0,1,2,3,4,6,7,8,8,8,8,8,8,7,6,4,3,2,1,0,0,0,0,0),
                Array(0,0,0,0,1,2,3,5,7,8,8,8,8,8,8,8,9,8,8,7,6,4,2,1,0,0,0,0),
                Array(0,0,0,0,1,3,5,7,8,8,8,7,6,6,6,6,7,8,8,9,8,6,4,2,1,0,0,0),
                Array(0,0,0,1,3,5,7,8,8,7,5,4,3,3,3,3,4,5,6,8,9,8,6,3,1,0,0,0),
                Array(0,0,1,2,4,7,8,8,6,4,2,2,1,1,1,1,2,2,4,6,8,9,7,4,2,1,0,0),
                Array(0,0,1,3,6,8,8,6,4,2,1,0,0,0,0,0,0,1,2,4,7,8,8,6,3,1,0,0),
                Array(0,0,2,4,7,8,7,5,2,1,0,0,0,0,0,0,0,0,1,2,5,8,8,7,4,2,0,0),
                Array(0,1,2,5,8,8,6,4,1,0,0,0,0,0,0,0,0,0,0,1,4,6,8,8,5,2,1,0),
                Array(0,1,3,6,8,8,5,3,1,0,0,0,0,0,0,0,0,0,0,1,3,5,8,8,6,3,1,0),
                Array(0,1,3,6,8,7,4,2,0,0,0,0,0,0,0,0,0,0,0,0,2,4,7,8,6,3,1,0),
                Array(0,2,4,7,8,6,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,4,6,8,7,4,2,0),
                Array(1,2,5,7,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,7,5,2,1),
                Array(1,2,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2,1),
                Array(1,2,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2,1),
                Array(1,2,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2,1),
                Array(1,3,6,8,8,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,5,8,8,5,3,1),
                Array(1,2,6,8,8,5,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,5,8,8,5,3,1),
                Array(1,3,5,8,8,6,2,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,5,8,8,5,3,1),
                Array(1,3,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,6,8,8,5,3,1),
                Array(1,2,5,8,8,5,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,5,8,8,5,2,1),
                Array(1,2,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2,1),
                Array(1,2,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2,1),
                Array(1,2,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,7,5,2,1),
                Array(0,2,4,7,8,6,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,4,6,8,7,4,2,0),
                Array(0,1,3,6,8,7,4,2,0,0,0,0,0,0,0,0,0,0,0,1,2,4,7,8,6,3,1,0),
                Array(0,1,3,6,8,8,5,3,1,0,0,0,0,0,0,0,0,0,0,1,3,5,8,8,6,3,1,0),
                Array(0,1,2,5,8,8,6,4,1,0,0,0,0,0,0,0,0,0,0,1,4,6,8,8,5,2,1,0),
                Array(0,0,2,4,7,8,8,5,2,1,0,0,0,0,0,0,0,0,1,2,5,7,8,7,4,2,0,0),
                Array(0,0,1,3,6,8,8,7,4,2,1,0,0,0,0,0,0,1,2,4,6,8,8,6,3,1,0,0),
                Array(0,0,1,2,4,7,9,8,6,4,2,2,1,1,1,1,1,2,4,6,8,8,7,4,2,1,0,0),
                Array(0,0,0,1,3,6,8,9,8,7,5,4,3,3,3,3,4,5,6,8,8,7,5,3,1,0,0,0),
                Array(0,0,0,1,2,4,6,8,9,8,8,7,6,6,6,6,7,8,8,8,7,5,3,1,0,0,0,0),
                Array(0,0,0,0,1,2,4,6,7,8,8,8,8,8,8,8,8,8,8,7,5,3,2,1,0,0,0,0),
                Array(0,0,0,0,0,1,2,3,4,6,7,8,8,8,8,8,8,7,6,4,3,2,1,0,0,0,0,0),
                Array(0,0,0,0,0,0,1,1,2,3,4,5,5,5,5,5,5,4,3,2,1,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
            ), "size"=>Array(28,40)),
            Array("char"=>Array(
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,1,1,1,0,0),
                Array(0,0,0,0,0,0,0,0,1,1,2,2,2,1,0),
                Array(0,0,0,0,0,0,0,1,1,3,4,5,3,1,0),
                Array(0,0,0,0,0,0,0,1,3,5,7,7,4,2,1),
                Array(0,0,0,0,0,1,1,3,5,8,9,8,5,2,1),
                Array(0,0,0,0,1,2,3,5,8,10,11,9,6,3,1),
                Array(0,0,0,1,2,4,6,8,10,12,12,9,6,2,1),
                Array(0,1,1,3,4,6,8,10,11,12,12,9,6,3,1),
                Array(1,2,3,5,7,8,9,10,11,11,11,9,6,2,1),
                Array(2,4,6,7,9,9,8,8,9,10,10,9,6,2,1),
                Array(3,5,7,8,8,7,6,6,7,8,9,9,6,2,1),
                Array(3,6,7,7,6,4,4,3,5,7,9,8,6,3,1),
                Array(3,4,5,4,3,2,2,2,4,6,8,8,5,2,1),
                Array(2,2,2,2,1,1,1,1,3,6,8,8,5,3,1),
                Array(1,1,1,1,0,0,0,1,3,6,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,2,5,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,2,5,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,2,5,8,8,6,2,1),
                Array(0,0,0,0,0,0,0,1,2,5,8,8,6,3,1),
                Array(0,0,0,0,0,0,0,1,2,5,8,8,5,3,1),
                Array(0,0,0,0,0,0,0,1,2,5,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,2,5,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,3,5,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,3,6,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,3,5,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,3,6,8,8,6,2,1),
                Array(0,0,0,0,0,0,0,1,2,5,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,3,6,8,8,6,2,1),
                Array(0,0,0,0,0,0,0,1,2,5,8,8,6,3,1),
                Array(0,0,0,0,0,0,0,1,3,5,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,2,5,8,8,5,3,1),
                Array(0,0,0,0,0,0,0,1,3,6,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,2,5,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,2,5,8,8,5,2,1),
                Array(0,0,0,0,0,0,0,1,2,5,7,7,5,2,1),
                Array(0,0,0,0,0,0,0,0,2,3,5,5,4,2,0),
                Array(0,0,0,0,0,0,0,0,1,2,3,3,2,1,0),
                Array(0,0,0,0,0,0,0,0,0,1,1,1,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
            ), "size"=>Array(15,40)),
            Array("char"=>Array(
                Array(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0),
                Array(0,0,0,0,0,1,1,2,3,4,5,5,5,5,5,5,4,3,2,1,1,0,0,0,0),
                Array(0,0,0,0,1,2,4,5,6,7,7,8,8,8,8,8,7,6,4,3,2,1,0,0,0),
                Array(0,0,0,1,3,5,6,8,8,8,8,8,8,8,8,8,8,8,7,6,4,2,1,0,0),
                Array(0,0,1,3,5,7,8,8,8,7,6,6,6,6,6,7,8,8,9,8,6,4,2,1,0),
                Array(0,1,2,5,7,8,8,7,6,4,3,3,3,3,3,4,5,6,8,9,8,6,3,1,0),
                Array(1,2,4,6,8,8,7,5,3,2,1,1,1,1,1,2,2,4,6,8,9,7,4,2,1),
                Array(1,3,5,8,8,7,4,2,1,1,0,0,0,0,0,0,1,2,4,7,8,8,6,3,1),
                Array(1,3,6,8,7,5,3,1,0,0,0,0,0,0,0,0,0,1,2,5,8,8,7,4,2),
                Array(1,3,6,7,6,3,1,0,0,0,0,0,0,0,0,0,0,0,2,4,7,9,8,5,2),
                Array(1,2,4,4,4,2,1,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2),
                Array(0,1,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2),
                Array(0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,7,5,2),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,7,8,7,4,2),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,5,7,8,6,3,1),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,6,8,7,5,2,1),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,7,8,6,4,2,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,7,7,7,4,2,1,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,7,7,7,5,3,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,7,8,7,5,3,1,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,7,8,7,5,3,1,1,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,1,3,5,6,7,7,5,3,2,1,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,1,3,5,6,7,7,5,3,2,1,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,1,1,3,5,6,7,6,5,3,1,1,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,1,2,3,5,6,7,6,5,3,1,1,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,1,2,3,5,7,7,6,5,3,1,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,1,2,4,6,7,7,6,5,3,1,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,1,3,4,6,7,7,6,4,3,1,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,1,3,5,6,7,7,6,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,1,3,5,7,8,7,6,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,1,3,5,7,8,8,6,4,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(1,2,5,7,9,9,8,6,4,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0),
                Array(2,4,7,10,11,10,9,7,5,4,3,3,3,2,2,3,3,3,3,2,2,2,2,1,0),
                Array(3,6,9,11,12,11,10,8,7,6,6,6,5,5,5,5,6,5,5,5,5,5,3,2,1),
                Array(3,6,9,11,11,11,10,9,9,8,8,8,8,8,8,8,8,8,8,8,8,7,5,3,1),
                Array(3,6,8,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,7,5,3,1),
                Array(2,4,5,5,6,6,6,6,6,5,6,5,5,5,5,5,5,6,5,5,5,5,3,2,1),
                Array(1,2,2,2,2,3,2,2,3,2,3,3,2,2,3,2,2,2,3,2,2,2,2,1,0),
                Array(0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0)
            ), "size"=>Array(25,40)),
            Array("char"=>Array(
                Array(0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,1,2,3,4,5,5,5,5,5,5,4,3,2,1,1,0,0,0,0,0,0),
                Array(0,0,0,1,2,4,6,7,8,8,8,8,8,8,7,6,4,3,2,1,0,0,0,0,0),
                Array(0,0,1,3,5,7,8,9,9,8,8,8,8,8,9,8,7,6,4,2,1,0,0,0,0),
                Array(0,1,3,5,7,8,9,8,7,6,6,6,6,7,8,8,9,8,7,4,2,1,0,0,0),
                Array(1,2,5,7,8,8,7,6,4,3,3,3,3,4,5,6,8,9,8,7,4,2,1,0,0),
                Array(2,4,6,8,8,7,5,3,2,1,1,1,1,2,2,4,6,8,9,8,6,3,1,0,0),
                Array(2,5,7,8,7,4,2,1,1,0,0,0,0,0,1,2,4,6,8,9,7,4,2,0,0),
                Array(3,5,6,6,4,3,1,0,0,0,0,0,0,0,0,1,2,4,7,9,8,5,2,1,0),
                Array(2,4,5,4,3,1,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2,1,0),
                Array(1,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2,1,0),
                Array(0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,7,5,2,1,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,7,8,7,4,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,6,7,7,5,3,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,4,5,7,7,6,4,2,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,1,2,2,3,4,5,6,8,8,7,5,3,1,0,0,0),
                Array(0,0,0,0,0,0,0,0,1,2,4,5,6,7,8,9,9,8,7,4,2,1,0,0,0),
                Array(0,0,0,0,0,0,0,0,1,3,5,7,8,9,10,10,10,9,7,4,2,1,0,0,0),
                Array(0,0,0,0,0,0,0,0,1,3,5,7,8,9,9,9,9,8,7,5,3,1,0,0,0),
                Array(0,0,0,0,0,0,0,0,1,2,4,5,5,6,6,6,7,7,7,6,5,3,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,1,2,2,2,3,3,3,4,5,7,7,6,5,2,1,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,3,5,7,8,6,4,2,1),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,6,8,8,6,3,1),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,5,7,8,7,4,2),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,7,8,8,5,2),
                Array(0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2),
                Array(1,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2),
                Array(2,4,5,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,7,5,2),
                Array(3,5,7,6,4,2,1,0,0,0,0,0,0,0,0,0,0,1,2,4,7,8,7,4,2),
                Array(3,6,8,8,6,4,2,1,0,0,0,0,0,0,0,0,1,1,3,6,8,8,6,3,1),
                Array(2,5,8,9,8,6,3,2,1,0,0,0,0,0,0,1,2,3,5,7,8,7,4,2,1),
                Array(1,4,7,9,9,8,6,4,2,2,1,1,1,1,1,2,4,6,7,8,8,6,3,1,0),
                Array(1,2,5,7,9,9,8,7,5,4,3,3,3,3,4,5,6,8,9,8,7,4,2,1,0),
                Array(0,1,3,5,7,9,9,9,8,7,6,6,6,6,7,8,8,9,8,7,4,2,1,0,0),
                Array(0,0,1,3,5,7,8,9,9,9,8,8,8,8,8,9,8,7,6,4,2,1,0,0,0),
                Array(0,0,0,1,2,4,5,6,7,8,8,8,8,8,8,7,6,4,3,2,1,0,0,0,0),
                Array(0,0,0,0,1,2,2,3,4,5,5,5,5,5,5,4,3,2,1,1,0,0,0,0,0),
                Array(0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0)
            ), "size"=>Array(25,40)),
            Array("char"=>Array(
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,2,1,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,6,5,3,2,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,7,8,7,5,2,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,8,10,10,9,5,2,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,7,10,12,12,9,6,3,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,2,4,6,9,11,13,12,10,6,3,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,1,3,5,8,10,12,12,12,9,6,3,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,1,2,5,7,9,10,11,11,11,9,6,2,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,1,2,4,6,8,9,9,9,10,10,9,6,3,1,0,0),
                Array(0,0,0,0,0,0,0,0,1,2,3,6,8,8,7,7,7,9,9,9,6,2,1,0,0),
                Array(0,0,0,0,0,0,0,0,1,3,5,7,8,7,6,5,5,7,9,8,6,2,1,0,0),
                Array(0,0,0,0,0,0,0,1,3,5,7,7,7,5,4,3,4,6,8,8,6,2,1,0,0),
                Array(0,0,0,0,0,0,1,2,5,7,7,7,5,3,2,2,3,6,8,8,5,3,1,0,0),
                Array(0,0,0,0,0,1,2,4,6,8,7,5,3,2,1,1,3,6,8,8,6,2,1,0,0),
                Array(0,0,0,0,0,2,3,6,8,8,6,3,2,1,0,1,3,6,8,8,5,2,1,0,0),
                Array(0,0,0,0,1,3,5,7,8,6,4,2,1,0,0,1,3,5,8,8,5,2,1,0,0),
                Array(0,0,0,1,2,5,7,8,7,5,2,1,0,0,0,1,2,5,8,8,5,2,1,0,0),
                Array(0,0,1,2,4,6,8,7,5,3,1,0,0,0,0,1,3,5,8,8,5,2,1,0,0),
                Array(0,1,2,4,6,8,8,6,4,2,1,0,0,0,0,1,2,5,8,8,6,2,1,0,0),
                Array(0,1,3,5,7,8,7,4,2,1,0,0,0,0,0,1,3,6,8,8,6,3,1,0,0),
                Array(1,3,5,7,9,8,6,4,2,1,0,0,0,0,0,1,3,6,8,8,6,3,1,0,0),
                Array(2,5,7,9,9,8,6,4,2,1,1,1,1,1,1,2,4,7,9,9,7,4,2,1,0),
                Array(4,7,9,11,10,9,7,5,4,3,3,2,2,3,3,4,6,9,10,10,9,6,4,2,1),
                Array(5,8,11,12,11,10,8,7,6,6,6,6,6,6,6,7,9,11,12,12,10,8,6,4,2),
                Array(5,8,10,11,11,10,9,9,8,8,8,8,8,8,8,9,10,12,13,13,12,10,8,6,3),
                Array(4,6,8,9,9,9,9,8,8,8,8,8,8,8,8,9,11,12,13,13,12,10,8,6,3),
                Array(2,4,5,6,6,6,6,5,6,5,5,5,5,6,6,7,9,11,12,12,10,8,6,4,2),
                Array(1,2,2,2,2,2,3,3,3,3,2,3,3,3,3,4,6,9,10,10,9,6,4,2,1),
                Array(0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,4,7,9,9,7,4,2,1,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,6,3,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,6,3,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,5,8,8,5,3,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,5,8,8,5,2,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,5,7,7,5,2,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,5,5,3,2,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,2,1,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
            ), "size"=>Array(25,40)),
            Array("char"=>Array(
                Array(0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0),
                Array(0,0,0,0,0,1,2,2,2,2,3,2,3,2,2,2,2,2,2,2,2,1,0,0,0),
                Array(0,0,0,0,1,3,4,5,5,6,5,5,6,5,5,6,5,5,5,5,3,2,1,0,0),
                Array(0,0,0,1,3,5,7,8,8,8,8,8,8,8,8,8,8,8,8,7,5,3,1,0,0),
                Array(0,0,0,2,4,7,9,10,10,9,8,8,8,8,8,8,8,8,8,7,5,3,1,0,0),
                Array(0,0,1,2,5,8,10,10,8,7,6,6,5,6,6,5,6,5,5,5,3,2,1,0,0),
                Array(0,0,1,3,5,8,9,8,6,4,3,3,3,2,3,2,2,2,2,2,2,1,0,0,0),
                Array(0,0,1,3,6,8,8,6,4,2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0),
                Array(0,0,1,4,6,8,7,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,2,4,7,8,6,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,1,2,5,7,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,1,3,6,8,8,5,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,1,3,6,8,7,5,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
                Array(0,2,4,7,9,8,5,3,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0),
                Array(1,2,5,8,9,8,6,5,4,4,5,5,5,5,5,4,3,2,2,1,0,0,0,0,0),
                Array(1,2,6,9,10,10,8,7,7,7,7,8,8,8,7,7,6,5,4,2,1,0,0,0,0),
                Array(1,3,6,9,11,11,9,8,8,8,8,8,8,8,8,8,8,7,6,4,3,1,0,0,0),
                Array(1,3,6,9,11,11,9,8,7,6,6,6,6,6,6,7,7,8,8,7,5,3,1,0,0),
                Array(1,3,6,8,9,9,7,5,4,3,3,3,3,3,3,4,5,6,7,8,7,4,2,1,0),
                Array(1,2,4,6,6,6,4,3,2,1,1,1,1,1,1,2,2,4,6,7,8,6,4,2,0),
                Array(0,1,2,3,3,3,2,1,0,0,0,0,0,0,0,0,1,2,4,6,8,7,5,2,1),
                Array(0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,2,5,7,8,6,3,1),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,7,8,7,4,2),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,7,5,2),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2),
                Array(1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,7,5,2),
                Array(2,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,7,8,7,4,2),
                Array(3,5,6,5,3,1,0,0,0,0,0,0,0,0,0,0,0,1,2,5,7,8,6,3,1),
                Array(3,6,7,7,4,2,1,0,0,0,0,0,0,0,0,0,1,2,4,6,8,7,5,2,1),
                Array(3,5,7,8,6,4,2,1,0,0,0,0,0,0,0,1,2,3,5,7,8,6,4,1,0),
                Array(2,4,6,8,7,6,4,2,2,1,1,1,1,1,1,2,4,5,7,7,7,4,2,1,0),
                Array(1,2,4,7,8,7,6,5,4,3,3,3,3,3,4,5,6,7,7,7,5,3,1,0,0),
                Array(0,1,3,5,7,8,8,7,7,6,6,6,6,6,7,7,8,8,7,5,3,1,0,0,0),
                Array(0,0,1,3,4,6,7,8,8,8,8,8,8,8,8,8,7,6,4,3,1,0,0,0,0),
                Array(0,0,0,1,2,4,5,6,7,7,8,8,8,7,7,6,5,4,2,1,0,0,0,0,0),
                Array(0,0,0,0,1,2,2,3,4,5,5,5,5,5,4,3,2,2,1,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
            ), "size"=>Array(25,40)),
            Array("char"=>Array(
                Array(0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,1,2,2,3,4,5,5,5,5,5,4,3,2,1,1,0,0,0,0,0),
                Array(0,0,0,0,0,1,1,2,4,5,6,7,7,8,8,8,8,7,6,4,3,2,1,0,0,0,0),
                Array(0,0,0,0,1,2,3,5,6,7,8,8,8,8,8,8,8,8,8,7,6,4,2,1,0,0,0),
                Array(0,0,0,1,2,3,5,7,8,8,7,7,6,6,6,6,7,8,8,9,8,6,4,2,1,0,0),
                Array(0,0,0,1,3,6,7,8,8,6,5,4,3,3,3,3,4,5,6,8,9,8,6,3,1,0,0),
                Array(0,0,1,3,5,7,9,8,6,4,2,2,1,1,1,1,2,2,4,6,8,8,7,4,2,1,0),
                Array(0,1,2,4,7,9,8,6,4,2,1,0,0,0,0,0,0,1,2,4,6,7,7,5,2,1,0),
                Array(0,1,3,6,8,9,7,4,2,1,0,0,0,0,0,0,0,0,1,2,4,5,6,4,2,1,0),
                Array(0,2,4,7,9,8,6,3,1,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,2,1,0),
                Array(1,2,5,8,9,7,4,2,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0),
                Array(1,3,6,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(1,3,6,8,7,5,2,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
                Array(2,4,7,8,7,4,2,1,1,1,1,1,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0),
                Array(2,5,8,8,7,4,2,1,1,2,3,4,5,5,5,5,5,4,3,2,1,1,0,0,0,0,0),
                Array(2,5,8,9,7,5,3,3,3,4,5,6,7,8,8,8,8,7,6,5,3,2,1,0,0,0,0),
                Array(2,5,9,9,8,6,5,5,5,6,7,7,8,8,8,8,8,8,8,7,6,4,2,1,0,0,0),
                Array(2,6,9,10,10,8,7,6,6,6,6,6,6,6,6,6,7,8,8,9,8,7,5,3,1,0,0),
                Array(2,6,9,11,11,9,8,7,5,4,3,3,3,3,3,3,4,5,6,8,9,9,7,5,2,1,0),
                Array(3,6,9,11,11,10,7,5,3,2,1,1,1,1,1,1,1,2,4,6,8,9,8,6,4,1,0),
                Array(2,6,9,11,11,9,6,3,2,1,0,0,0,0,0,0,0,1,2,3,5,8,9,8,5,2,1),
                Array(3,6,9,11,10,7,4,2,1,0,0,0,0,0,0,0,0,0,1,2,3,6,8,8,6,3,1),
                Array(2,6,9,10,8,5,2,1,0,0,0,0,0,0,0,0,0,0,0,1,2,4,7,8,7,4,2),
                Array(2,5,8,9,7,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,7,5,2),
                Array(2,5,7,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2),
                Array(2,4,7,7,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2),
                Array(1,3,6,7,5,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2),
                Array(1,2,5,6,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,7,8,8,5,2),
                Array(0,2,4,6,6,4,2,1,0,0,0,0,0,0,0,0,0,0,0,1,2,5,8,8,7,4,2),
                Array(0,1,3,5,6,5,3,2,1,0,0,0,0,0,0,0,0,0,1,2,4,6,8,8,6,3,1),
                Array(0,1,2,4,6,6,5,3,2,1,0,0,0,0,0,0,0,1,2,3,6,8,9,7,4,2,1),
                Array(0,0,1,3,5,7,7,5,4,2,1,1,1,1,1,1,2,2,4,6,8,9,8,6,3,1,0),
                Array(0,0,1,2,4,6,7,7,6,5,4,3,3,3,3,3,4,5,6,8,9,8,7,4,2,1,0),
                Array(0,0,0,1,2,4,6,7,7,7,6,6,6,6,6,6,7,8,8,9,8,7,4,2,1,0,0),
                Array(0,0,0,0,1,2,4,5,7,7,8,8,8,8,8,8,8,8,8,7,6,4,2,1,0,0,0),
                Array(0,0,0,0,0,1,2,3,4,6,7,7,8,8,8,8,8,7,6,4,3,2,1,0,0,0,0),
                Array(0,0,0,0,0,0,1,1,2,3,4,5,5,5,5,5,5,4,3,2,1,1,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0)
            ), "size"=>Array(27,40)),
            Array("char"=>Array(
                Array(0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0),
                Array(1,2,2,2,2,2,3,2,3,2,2,2,2,2,2,3,2,2,3,2,2,2,1),
                Array(2,3,5,5,5,6,5,5,6,5,5,6,6,5,5,5,5,6,6,6,5,4,2),
                Array(3,5,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,6,3),
                Array(3,5,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,10,10,9,7,4),
                Array(2,3,5,5,5,6,5,5,5,5,5,6,5,6,6,6,7,8,9,10,9,6,3),
                Array(1,2,2,2,2,2,2,3,2,3,2,3,2,3,3,4,5,6,8,8,7,4,2),
                Array(0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,5,6,6,5,3,1),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,5,5,5,3,1,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,5,5,3,2,1,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,5,5,4,2,1,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,6,5,3,1,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,6,5,4,2,1,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,1,2,4,5,6,4,2,1,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,1,3,5,6,5,3,1,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,1,3,5,6,6,4,2,1,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,1,2,4,6,7,5,3,1,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,1,3,5,7,6,4,2,1,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,1,2,4,7,7,6,3,1,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,1,3,6,7,7,4,2,1,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,2,4,7,7,6,3,1,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,1,2,5,7,7,5,3,1,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,1,3,6,8,7,4,2,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,1,2,5,7,7,6,3,1,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,1,3,6,7,7,5,2,1,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,2,4,7,8,6,4,1,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,1,2,5,7,8,6,3,1,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,1,3,6,8,7,5,2,1,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,1,3,6,8,7,4,2,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,2,4,7,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,1,2,5,7,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,1,3,6,8,7,5,2,1,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,1,3,6,8,7,4,2,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,2,4,7,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,2,5,7,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,1,2,4,7,7,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,2,3,5,5,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,1,2,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
            ), "size"=>Array(23,40)),
            Array("char"=>Array(
                Array(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,1,1,2,3,4,5,5,5,5,5,5,4,3,2,1,1,0,0,0,0,0),
                Array(0,0,0,0,1,2,4,5,6,7,7,8,8,8,8,8,7,6,4,3,2,1,0,0,0,0),
                Array(0,0,0,1,3,5,6,8,8,8,8,8,8,8,8,8,9,8,7,6,4,2,1,0,0,0),
                Array(0,0,1,2,5,7,8,9,8,7,6,6,6,6,6,7,8,8,9,8,7,4,2,1,0,0),
                Array(0,1,2,4,7,9,9,8,6,4,3,3,3,3,3,4,5,6,8,9,8,7,4,2,1,0),
                Array(0,1,3,6,8,9,8,5,3,2,1,1,1,1,1,2,2,4,6,8,9,8,6,3,1,0),
                Array(0,2,4,7,9,8,6,3,2,1,0,0,0,0,0,0,1,2,4,6,8,9,7,4,2,0),
                Array(1,2,5,8,9,7,4,2,1,0,0,0,0,0,0,0,0,1,2,4,7,9,8,5,2,1),
                Array(1,2,5,8,9,7,4,1,0,0,0,0,0,0,0,0,0,0,1,4,7,9,8,5,2,1),
                Array(1,2,5,8,9,7,4,1,0,0,0,0,0,0,0,0,0,0,1,4,7,9,8,5,2,1),
                Array(0,2,4,7,8,7,4,2,1,0,0,0,0,0,0,0,0,1,2,4,7,9,8,5,2,1),
                Array(0,1,3,6,8,8,6,3,2,1,0,0,0,0,0,0,1,2,3,6,8,9,7,4,2,0),
                Array(0,1,2,5,7,8,7,5,3,2,1,1,1,1,1,1,2,3,5,8,9,8,6,3,1,0),
                Array(0,0,1,3,5,7,8,7,6,4,3,3,3,3,3,3,4,6,8,9,8,7,4,2,1,0),
                Array(0,0,1,2,4,7,9,9,9,8,7,6,6,6,6,7,8,9,10,9,8,5,3,1,0,0),
                Array(0,0,0,1,4,7,9,11,11,10,9,8,8,8,9,9,10,11,11,9,7,4,2,1,0,0),
                Array(0,0,1,2,4,7,10,11,11,10,9,8,8,8,9,9,10,11,11,9,7,4,2,1,0,0),
                Array(0,0,1,3,6,8,10,10,9,8,6,6,6,6,6,7,8,9,10,9,8,5,3,1,0,0),
                Array(0,1,2,5,7,9,9,8,6,4,3,3,3,3,3,4,5,7,8,9,9,7,5,2,1,0),
                Array(1,2,4,7,9,9,8,5,3,2,1,1,1,1,1,1,2,4,6,8,9,8,6,4,2,0),
                Array(1,3,6,8,9,8,5,3,1,1,0,0,0,0,0,0,1,2,3,5,8,9,8,5,2,1),
                Array(2,4,7,9,8,6,3,1,0,0,0,0,0,0,0,0,0,1,1,3,6,8,8,6,3,1),
                Array(2,5,8,9,7,4,2,1,0,0,0,0,0,0,0,0,0,0,1,2,4,7,8,7,4,2),
                Array(2,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,7,5,2),
                Array(2,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2),
                Array(2,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,8,5,2),
                Array(2,5,7,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,7,5,2),
                Array(2,4,7,8,7,4,2,1,0,0,0,0,0,0,0,0,0,0,0,2,4,7,8,7,4,2),
                Array(1,3,6,8,7,5,3,1,0,0,0,0,0,0,0,0,0,0,1,3,5,7,8,6,3,1),
                Array(1,2,5,7,8,7,5,3,1,1,0,0,0,0,0,0,1,1,2,4,7,8,7,5,2,1),
                Array(0,1,4,6,8,8,7,5,3,2,1,1,1,1,1,1,2,3,5,7,8,8,6,4,1,0),
                Array(0,1,2,4,7,8,8,7,6,5,4,3,3,3,3,3,4,5,7,8,8,7,4,2,1,0),
                Array(0,0,1,3,5,6,8,8,8,8,7,6,6,6,6,6,7,7,8,8,6,5,3,1,0,0),
                Array(0,0,0,1,2,4,6,7,8,8,8,8,8,8,8,8,8,8,7,6,4,2,1,0,0,0),
                Array(0,0,0,0,1,2,3,4,6,7,8,8,8,8,8,7,7,6,4,3,2,1,0,0,0,0),
                Array(0,0,0,0,0,1,1,2,3,4,5,5,5,5,5,5,4,3,2,1,1,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0)
            ), "size"=>Array(26,40)),
            Array("char"=>Array(
                Array(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,1,1,2,3,4,5,5,5,5,5,4,3,2,1,1,0,0,0,0,0,0),
                Array(0,0,0,0,1,2,3,4,6,7,8,8,8,8,7,7,6,4,3,2,1,0,0,0,0,0),
                Array(0,0,0,1,2,4,6,7,8,8,8,8,8,8,8,8,7,7,5,4,2,1,0,0,0,0),
                Array(0,0,1,2,4,7,8,9,8,8,7,6,6,6,6,6,7,7,7,6,4,3,1,0,0,0),
                Array(0,1,2,4,7,8,9,8,6,5,4,3,3,3,3,4,5,6,7,7,6,4,2,1,0,0),
                Array(0,1,3,6,8,9,8,6,4,2,1,1,1,1,1,1,2,4,5,7,7,6,4,2,1,0),
                Array(1,2,4,7,9,8,6,3,2,1,0,0,0,0,0,0,1,2,3,5,6,7,5,3,1,0),
                Array(1,3,6,8,8,6,4,2,1,0,0,0,0,0,0,0,0,1,1,3,5,6,6,4,2,0),
                Array(2,4,7,8,8,5,2,1,0,0,0,0,0,0,0,0,0,0,1,2,4,6,6,4,2,1),
                Array(2,5,8,8,7,4,2,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,6,5,3,1),
                Array(2,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,7,6,3,1),
                Array(2,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,7,6,4,2),
                Array(2,5,8,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,8,7,5,2),
                Array(2,5,7,8,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,6,9,8,5,2),
                Array(2,4,7,8,7,4,2,1,0,0,0,0,0,0,0,0,0,0,1,2,4,7,9,9,5,2),
                Array(1,3,6,8,8,6,3,2,1,0,0,0,0,0,0,0,0,1,1,3,6,9,10,9,6,3),
                Array(1,2,5,8,9,8,5,3,2,1,0,0,0,0,0,0,1,2,3,5,8,10,11,9,6,2),
                Array(0,2,4,6,8,9,8,6,4,2,1,1,1,1,1,1,2,3,5,7,9,11,11,9,6,3),
                Array(0,1,2,5,7,9,9,8,7,5,4,3,3,3,3,4,5,6,7,8,9,11,11,9,6,3),
                Array(0,0,1,3,5,7,9,9,9,8,7,6,6,6,6,6,7,7,7,7,8,10,10,9,6,3),
                Array(0,0,0,1,3,5,7,8,9,9,9,8,8,8,7,7,7,6,5,5,6,8,9,8,6,2),
                Array(0,0,0,0,1,2,4,5,6,7,8,8,8,7,7,6,5,4,3,4,5,7,9,8,5,2),
                Array(0,0,0,0,0,1,2,2,3,4,5,5,5,5,4,3,2,2,2,2,4,7,8,8,5,2),
                Array(0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,1,1,1,1,2,4,7,8,7,4,2),
                Array(0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,2,5,7,8,6,3,1),
                Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,8,8,6,3,1),
                Array(0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,4,6,8,8,5,2,1),
                Array(0,1,2,3,3,3,1,1,0,0,0,0,0,0,0,0,0,1,2,5,7,8,7,4,2,0),
                Array(0,1,2,4,5,5,3,1,1,0,0,0,0,0,0,0,1,2,4,6,8,8,6,3,1,0),
                Array(0,1,3,5,7,7,5,3,1,1,0,0,0,0,0,1,2,3,6,8,9,7,4,2,1,0),
                Array(0,1,2,5,7,8,7,5,3,2,1,1,1,1,1,2,4,6,8,9,8,6,3,1,0,0),
                Array(0,0,1,4,6,8,9,8,6,4,3,3,3,3,4,5,6,8,9,8,7,4,2,1,0,0),
                Array(0,0,1,2,5,7,8,9,8,7,6,6,6,6,7,8,8,9,8,7,4,2,1,0,0,0),
                Array(0,0,0,1,3,5,6,8,8,8,8,8,8,8,8,8,8,7,6,4,2,1,0,0,0,0),
                Array(0,0,0,0,1,2,4,5,6,7,7,8,8,8,8,7,6,4,3,2,1,0,0,0,0,0),
                Array(0,0,0,0,0,1,2,2,3,4,5,5,5,5,5,4,3,2,1,1,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,1,1,2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0,0),
                Array(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
            ), "size"=>Array(26,40))
        );
        return $char_global_mas;
    }

  private function get_col($array, $num) { //extracts collon from two-dimensional array
        /**************************************************************************************************/
        return $array[$num];
    }
    /**************************************************************************************************/
    private  function get_row($array, $num) { //extracts row from two-dimensional array
        /**************************************************************************************************/
        $retmas = Array();
        $size_x = sizeof($array);
        for($x=0;$x<$size_x;$x++) {
            $retmas[] = $array[$x][$num];
        }
        return $retmas;
    }

    /**************************************************************************************************/
    private  function get_dispersion($array, $bg) { //gets dispersion from one-dimensional array using average $bg
        /**************************************************************************************************/

        $size = sizeof($array);
        if ($size>0) {
            $dispersion = 0.0;
            for($c=0;$c<$size;$c++) {
                $val = $bg-$array[$c];
                $dispersion+=$val*$val;
            }
            return $dispersion;
        }
        else {
            echo "error!!!!!!!!!!";
            return -1;
        }
    }
    /**************************************************************************************************/
    private  function parse_letters($row, $max_x, $max_y, $bg) {
        /**************************************************************************************************/
        global $conf;
        $min_dispersion = $conf['letters_min_dispersion'];
        $letter = -1;
        $adding = false;
        for($x=0;$x<=$max_x;$x++) {
            $col = $this->get_row($row, $x);
            $dispersion = $this->get_dispersion($col, $bg);
            if ($dispersion > $min_dispersion) {
                if ($adding==false)
                    $letter++;
                $letters[$letter][]=$col;
                $adding = true;
            }
            else {
                $adding = false;
            }
        }
        $size = sizeof($letters);
        for($c=0;$c<$size;$c++)
            $letters[$c] = $this->transpon($letters[$c]);
        return $letters;
    }
    /**************************************************************************************************/
    private  function parse_word_lines($mas, $max_x, $max_y, $bg) {
        /**************************************************************************************************/
        global $conf;
        $min_dispersion = $conf['word_lines_min_dispersion'];
        $line = -1;
        $adding = false;
        for($y=0;$y<=$max_y;$y++) {
            $row = $this->get_row($mas, $y);
            $dispersion = $this->get_dispersion($row, $bg);

            if ($dispersion > $min_dispersion) {
                if ($adding==false)
                    $line++;
                $lines[$line][]=$row;
                $adding = true;
            }
            else {
                $adding = false;
            }
        }
        return $lines;
    }
    /**************************************************************************************************/
    private  function test_char_verbose($letter, $template_index,$bg) {
        /**************************************************************************************************/
        global $char_mas;
        global $max_color;

        $size = $char_mas[$template_index]['size'];
        $char = $char_mas[$template_index]['char'];

        $height=sizeof($letter);
        $width=sizeof($letter[0]);
        $sum = 0;
        $x_diff = $size[0]/$width;
        $y_diff = $size[1]/$height;
        $color_diff = 255/$max_color;

        echo "<pre>";
        for($y=0;$y<$height;$y++) {
            echo "<br>";
            for($x=0;$x<$width;$x++) {
                $x_rel = ceil($x*$x_diff); //translate $x, $y to relative coords
                $y_rel = ceil($y*$y_diff);
                $val = $this->diff_char($letter, $char,$x_diff,$y_diff, $x,$y,$bg);
                $sum+= $val;

                if ($letter[$y][$x]!=$char[$y_rel][$x_rel]) {
                    echo '<font color="red">'.$letter[$y][$x].'-'.$char[$y_rel][$x_rel]."</font>&nbsp;";
                }else {
                    echo $letter[$y][$x].'-'.$char[$y_rel][$x_rel]."</font>&nbsp;";
                }
                //echo ($letter[$y][$x]*$color_diff).':'.$char[$y_rel][$x_rel]."\t";

            }
        }
        echo "</pre>";
        return $sum;
    }
    /**************************************************************************************************/
    private   function test_chars($letter,$bg,$char_mas,$max_color) {
        /**************************************************************************************************/
//global $char_mas;
//global $max_color;

        $lib_size = sizeof($char_mas);
        $min_disp = -1;
        for($c=0; $c<$lib_size;$c++) {
            $disp = $this->test_char($letter, $c, $bg,$char_mas,$max_color);
            //echo 'AT:'.$c.':'.$disp.'<br>';
            if (($disp<$min_disp)||($min_disp==-1)) {
                $min_disp = $disp;
                $min_disp_at = $c;
            }
        }
        //$disp = test_char_verbose($letter, $min_disp_at,$bg);
        return Array($min_disp,$min_disp_at);
        //return $min_disp_at;
    }

    /**************************************************************************************************/
    private   function test_char($letter, $template_index,$bg,$char_mas,$max_color) {
        /**************************************************************************************************/
//global $char_mas;
//global $max_color;
        $size = $char_mas[$template_index]['size'];
        $char = $char_mas[$template_index]['char'];

        $height=sizeof($letter);
        $width=sizeof($letter[0]);
        $sum = 0;
        $color_diff = 255/$max_color;
        $x_diff = $size[0]/$width;
        $y_diff = $size[1]/$height;

        for($y=0;$y<$height;$y++) {
            for($x=0;$x<$width;$x++) {
                $sum+= $this->diff_char($letter, $char,$x_diff,$y_diff, $x,$y, $bg);
            }
        }
        return $sum;
    }
    /**************************************************************************************************/
    private   function diff_char($l_mas, $c_mas,$x_diff,$y_diff, $x,$y, $bg) { //returns dispersion of one pixel in letter's coord. system
        /**************************************************************************************************/

        global $color_diff;
        error_reporting(0);
        $x_rel = ceil($x*$x_diff); //translate $x, $y to relative coords
        $y_rel = ceil($y*$y_diff);
        $char_val = $c_mas[$y_rel+1][$x_rel]+$c_mas[$y_rel-1][$x_rel]+$c_mas[$y_rel][$x_rel+1]+$c_mas[$y_rel][$x_rel-1];
        $char_val = $char_val/4;
        //echo '['.($l_mas[$y][$x]*$color_diff)-$c_mas[$y_rel][$x_rel])).']';
        $val_m[] = abs(($l_mas[$y][$x])-($c_mas[$y_rel][$x_rel]));

        $val_m[] = abs(($l_mas[$y][$x])-($c_mas[$y_rel+1][$x_rel]));
        $val_m[] = abs(($l_mas[$y][$x])-($c_mas[$y_rel-1][$x_rel]));
        $val_m[] = abs(($l_mas[$y][$x])-($c_mas[$y_rel][$x_rel+1]));
        $val_m[] = abs(($l_mas[$y][$x])-($c_mas[$y_rel][$x_rel-1]));

        $val_m[] = abs(($l_mas[$y][$x])-($c_mas[$y_rel+1][$x_rel+1]));
        $val_m[] = abs(($l_mas[$y][$x])-($c_mas[$y_rel-1][$x_rel-1]));
        $val_m[] = abs(($l_mas[$y][$x])-($c_mas[$y_rel+1][$x_rel-1]));
        $val_m[] = abs(($l_mas[$y][$x])-($c_mas[$y_rel-1][$x_rel+1]));

        $val = min($val_m);
        return $val*$val*$val*$val*$val;
    }

    private  function getmicrotime(){
        $tmp = explode(" ",microtime());
        return ((float)$tmp[0] + (float)$tmp[1]);
    }

    /**************************************************************************************************/
    private  function print_matrix($letter) {
        /**************************************************************************************************/
        $ret = '';
        foreach($letter as $row) {
            $ret.= "\n";
            foreach($row as $pixel) {
                $ret.= $pixel." ";
            }
        }
        return $ret;
    }

    /**************************************************************************************************/
    private  function print_array($letter,$bg) {
        /**************************************************************************************************/
        $ret = '';
        $letter_size = sizeof($letter);
        $c=1;
        $ret.= "\n\t".'Array("char"=>Array('."\n";
        foreach($letter as $row) {
            $ret.= "\t\tArray(";
            $row_size= sizeof($row);
            $c1=1;
            foreach($row as $pixel) {
                $ret.= $pixel;
                if (($row_size-$c1)!=0)
                    $ret.= ",";
                $c1++;
            }

            if (($letter_size-$c)!=0)
                $ret.= "),\n";
            else
                $ret.= ")\n";

            $c++;
        }
        $ret.= "\t\t".'), "size"=>Array('.($c1-1).','.($c-1)."))";

        return $ret;
    }
    /**************************************************************************************************/
    private function flatten_matrix($letter, $bg, $max_color) { //replaces background with 0 and 1 otherwice
        /**************************************************************************************************/
//global $max_color;

        $y_size = sizeof($letter);
        $x_size = sizeof($letter[0]);

        for($c=0;$c<$y_size;$c++) {
            for($c1=0;$c1<$x_size;$c1++) {
                $tmp_val = (abs($bg-$letter[$c][$c1])/$max_color)*3;
                $letter[$c][$c1]=round($tmp_val*$tmp_val);
            }
        }
        return $letter;
    }
    /**************************************************************************************************/
    private function write_template($filename) { //returns template
        /**************************************************************************************************/
        header("Content-type: application/octet-stream");
        header("Connection: close");

        $image_data=$this->extract_mas($filename);

        $max_x		= $image_data['imagewidth']-1;
        $max_y		= $image_data['imageheight']-1;
        $mas		= $image_data['mas'];
        $max_color	= $image_data['max_color'];
        $bg			= $image_data['bg'];


        $lines = $this->parse_word_lines($mas, $max_x, $max_y, $bg);
        $ret = '';
        $ret.= '<?php';
        foreach($lines as $word_line) {
            $letters = $this->parse_letters($word_line, $max_x, $max_y, $bg);
            $ret.="\n".'$'.'char_global_mas[] = Array (';
            $letters_size = sizeof($letters);
            $c = 1;
            foreach($letters as $letter) {
                $letter = $this->flatten_matrix($letter,$bg,$max_color);
                $ret.= $this->print_array($letter,$bg);
                if (($letters_size-$c)!=0)
                    $ret.=',';
                $c++;
            }
            $ret.="\n".');'."\n";
        }
        $ret.= '?>';
        return $ret;

    }
    /**************************************************************************************************/
    private  function transpon($mas) { //returns a tronsponed matrix
        /**************************************************************************************************/
        $retmas = Array();
        foreach($mas as $row) {
            $size = sizeof($row);
            for($c=0;$c<$size;$c++) {
                $retmas[]= $this->get_row($mas, $c);
            }
            return $retmas; //nasty should think of cleaner solution
        }
        return $retmas;
    }
    /**************************************************************************************************/
    private function extract_mas($filename) { //returns a two dimensional matrix with parsed data
        /**************************************************************************************************/
        $imagehw = @GetImageSize($filename) or die('ERROR occured while trying to stat image file: '.$filename);
        $imagewidth = $imagehw[0];
        $imageheight = $imagehw[1];
        $imagetype = $imagehw[2];

        if($imagetype==1) {			//GIF

//	Uncoment next three lines if you want to use GIF+gif2png. Insecure!!!! anything could be passed to shell.
//		$ret = `cat $filename|/usr/local/bin/gif2png`;
//		$filename = 'noname.png';
//		$im = imagecreatefrompng($filename);

//btw if anyone has a good idea how to integrate other image formats please let me know

            echo 'ERROR: GIF support is not in by default! If you really want to enable this check parse_image function in index.php';
            exit(0);
        }
        elseif($imagetype==2) {		//JPG
            $im = imagecreatefromjpeg($filename);
        }
        elseif($imagetype==3) {		//PNG
            $im = imagecreatefrompng($filename);
        }
        else {
            echo 'ERROR:Unsuported image type code:'.$imagetype.'. phpOCR only supports PNG, JPG, GIF(see doc.)';
            exit(0);
        }


        $max_color=-1;
        for($y=0;$y<$imageheight;$y++) {
            for($x=0;$x<$imagewidth;$x++) {
                $rgb = ImageColorAt($im, $x, $y);
                if($rgb>$max_color) $max_color=$rgb;
                $mas[$x][$y] = $rgb;
            }
        }
        $bg = $mas[0][0];		//we detect background by checking the first top pixel

        return Array('mas'=>$mas,'max_color'=>$max_color,'imagewidth'=>$imagewidth,'imageheight'=>$imageheight,'bg'=>$bg);
    }
    /**************************************************************************************************/
    private  function parse_image($filename,$font_file) { //returns a two dimensional matrix with parsed data
        /**************************************************************************************************/

        $image_data=$this->extract_mas($filename);

        $max_x		= $image_data['imagewidth']-1;
        $max_y		= $image_data['imageheight']-1;
        $mas		= $image_data['mas'];
        $max_color	= $image_data['max_color'];
        $bg			= $image_data['bg'];

        $lines = $this->parse_word_lines($mas, $max_x, $max_y, $bg);
        $font_file = $this->conf['font_file'];		//font library
        $line_index=0;
        foreach($lines as $word_line) {
            //echo "&lt;LINE&gt;\n";
            $letters = $this->parse_letters($word_line, $max_x, $max_y, $bg);
            //echo "<br>";
            $letter_index=0;
            if (sizeof($this->char_global_mas)>1) echo 'WARNING!!! The output will contain only result of the second font<br>';
            foreach($this->char_global_mas as $char_mas) {	//for testing purposes. tests w different fonts
                foreach($letters as $letter) {
                    $letter = $this->flatten_matrix($letter,$bg,$max_color); //global $letter
                    $tmp = $this->test_chars($letter,$bg,$char_mas,$max_color);
                    $disp = $tmp[0];	//relative number of trust
                    $num = $tmp[1];		//parsed number
                    $retmas[$line_index][$letter_index]=Array($num,$disp);
                    //echo '[[[['.$num.']]]]';
                    $letter_index++;
                }
            }
            $line_index++;
        }
        return $retmas;
    }
    private function print_output_html($retmas,$filename,$time) {
        /**************************************************************************************************/
        $number = [];
        foreach($retmas as $line) {
            foreach($line as $digit) {
                array_push($number,$digit[0]);
            }
        }
        $implod = implode('',$number);
        return $implod ;
    }
    /**************************************************************************************************/
  private  function print_output_plain($retmas) {
        /**************************************************************************************************/
        header("Content-type: application/octet-stream");
        header("Connection: close");

        $ret = '';
        foreach($retmas as $line) {
            foreach($line as $digit) {
                $ret.=$digit[0];
            }
            $ret.="\n";
        }
        return substr($ret,0,strlen($ret)-1);
    }

}
?>
